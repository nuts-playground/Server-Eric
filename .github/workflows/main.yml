name: CI/CD Docker

on:
  push:
    branches: [main]

jobs:
  build:
    name: run
    runs-on: [ self-hosted, Linux, x64 ]
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Generate Docker Environment Variables File for Production
        run: |
          echo "SERVER_PORT=$SERVER_PORT" >> .env
        env:
          SERVER_PORT: ${{ secrets.SERVER_PORT }}

      - name: Generate Environment Variables File for Production
        run: |
          cd app
          echo "MODE=$MODE" >> .production.env
          echo "MYSQL_HOST=$MYSQL_HOST" >> .production.env
          echo "MYSQL_PORT=$MYSQL_PORT" >> .production.env
          echo "MYSQL_USERNAME=$MYSQL_USERNAME" >> .production.env
          echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .production.env
          echo "MYSQL_NAME=$MYSQL_NAME" >> .production.env
          echo "SESSION_SECRET_KEY=$SESSION_SECRET_KEY" >> .production.env
          echo "REDIS_HOST=$REDIS_HOST" >> .production.env
          echo "REDIS_PORT=$REDIS_PORT" >> .production.env
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> .production.env
          echo "GOOGLE_OAUTH_CLIENT_ID=$GOOGLE_OAUTH_CLIENT_ID" >> .production.env
          echo "GOOGLE_OAUTH_CLIENT_SECRET=$GOOGLE_OAUTH_CLIENT_SECRET" >> .production.env
          echo "GOOGLE_OAUTH_CALLBACK_URL=$GOOGLE_OAUTH_CALLBACK_URL" >> .production.env
          echo "GHUB_CLIENT_ID=$GHUB_CLIENT_ID" >> .production.env
          echo "GHUB_CLIENT_SECRET=$GHUB_CLIENT_SECRET" >> .production.env
          echo "GHUB_OAUTH_CALLBACK_URL=$GHUB_OAUTH_CALLBACK_URL" >> .production.env
          echo "NAVER_CLIENT_ID=$NAVER_CLIENT_ID" >> .production.env
          echo "NAVER_CLIENT_SECRET=$NAVER_CLIENT_SECRET" >> .production.env
          echo "NAVER_OAUTH_CALLBACK_URL=$NAVER_OAUTH_CALLBACK_URL" >> .production.env
          echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> .production.env
          echo "KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET" >> .production.env
          echo "KAKAO_OAUTH_CALLBACK_URL=$KAKAO_OAUTH_CALLBACK_URL" >> .production.env
          echo "SERVER_PORT=$SERVER_PORT" >> .production.env
          echo "ACCESS_CORS_ORIGIN=$ACCESS_CORS_ORIGIN" >> .production.env
        env:
          MODE: ${{ secrets.PROD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_NAME: ${{ secrets.MYSQL_NAME }}
          SESSION_SECRET_KEY: ${{ secrets.SESSION_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_CALLBACK_URL: ${{ secrets.GOOGLE_OAUTH_CALLBACK_URL }}
          GHUB_CLIENT_ID: ${{ secrets.GHUB_CLIENT_ID }}
          GHUB_CLIENT_SECRET: ${{ secrets.GHUB_CLIENT_SECRET }}
          GHUB_OAUTH_CALLBACK_URL: ${{ secrets.GHUB_OAUTH_CALLBACK_URL }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_OAUTH_CALLBACK_URL: ${{ secrets.NAVER_OAUTH_CALLBACK_URL }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_OAUTH_CALLBACK_URL: ${{ secrets.KAKAO_OAUTH_CALLBACK_URL }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          ACCESS_CORS_ORIGIN: ${{ secrets.ACCESS_CORS_ORIGIN }}

      - name: Set remote and pull
        run: |
          git pull origin main

      - name: Stop Docker Compose
        run: |
          sudo docker-compose down -d

      - name: Remove Docker image if exists
        run: |
          IMAGE_NAME="server-eric_nestjs"
          # 이미지 이름에 "server-eric_nestjs"가 포함된 이미지를 찾아서 삭제
          if sudo docker images --quiet --filter "reference=${IMAGE_NAME}*" | grep . ; then
            sudo docker images --quiet --filter "reference=${IMAGE_NAME}*" | xargs sudo docker rmi -f
          fi

      - name: Restart Docker Compose
        run: |
          sudo docker-compose up -d
