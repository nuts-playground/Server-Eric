name: CI/CD Docker

on:
  push:
    branches: [main]

jobs:
  build:
    name: run
    runs-on: [ self-hosted, Linux, x64 ]
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Generate Environment Variables File for Production
        run: |
          echo "MYSQL_HOST=$MYSQL_HOST" >> .production.env
          echo "MYSQL_PORT=$MYSQL_PORT" >> .production.env
          echo "MYSQL_USERNAME=$MYSQL_USERNAME" >> .production.env
          echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .production.env
          echo "MYSQL_NAME=$MYSQL_NAME" >> .production.env
          echo "MODE=$MODE" >> .production.env
          echo "SESSION_SECRET_KEY=$SESSION_SECRET_KEY" >> .production.env
        env:
          MODE: ${{ secrets.PROD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_NAME: ${{ secrets.MYSQL_NAME }}
          SESSION_SECRET_KEY: ${{ secrets.SESSION_SECRET_KEY }}

      - name: Set remote and pull
        run: |
          git pull origin main

      - name: Stop Docker Compose
        run: |
          sudo docker-compose down

      - name: Remove Docker image if exists
        run: |
          IMAGE_NAME="server-eric_nestjs"
          # 이미지 이름에 "server-eric_nestjs"가 포함된 이미지를 찾아서 삭제
          if sudo docker images --quiet --filter "reference=${IMAGE_NAME}*" | grep . ; then
            sudo docker images --quiet --filter "reference=${IMAGE_NAME}*" | xargs sudo docker rmi -f
          fi

      - name: Restart Docker Compose
        run: |
          sudo docker-compose up -d